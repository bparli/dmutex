// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dsync.proto

/*
Package dsync is a generated protocol buffer package.

It is generated from these files:
	dsync.proto

It has these top-level messages:
	LockReq
	Node
	InquireReply
*/
package dsync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request the distributed lock
type LockReq struct {
	Node  string                     `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Tstmp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=tstmp" json:"tstmp,omitempty"`
}

func (m *LockReq) Reset()                    { *m = LockReq{} }
func (m *LockReq) String() string            { return proto.CompactTextString(m) }
func (*LockReq) ProtoMessage()               {}
func (*LockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LockReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *LockReq) GetTstmp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Tstmp
	}
	return nil
}

// for Reply, Inquire, and Relinquish messages
type Node struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

// Response to an Inquire message.  May either yield or relinquish
type InquireReply struct {
	Yield      bool `protobuf:"varint,1,opt,name=yield" json:"yield,omitempty"`
	Relinquish bool `protobuf:"varint,2,opt,name=relinquish" json:"relinquish,omitempty"`
}

func (m *InquireReply) Reset()                    { *m = InquireReply{} }
func (m *InquireReply) String() string            { return proto.CompactTextString(m) }
func (*InquireReply) ProtoMessage()               {}
func (*InquireReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InquireReply) GetYield() bool {
	if m != nil {
		return m.Yield
	}
	return false
}

func (m *InquireReply) GetRelinquish() bool {
	if m != nil {
		return m.Relinquish
	}
	return false
}

func init() {
	proto.RegisterType((*LockReq)(nil), "dsync.LockReq")
	proto.RegisterType((*Node)(nil), "dsync.Node")
	proto.RegisterType((*InquireReply)(nil), "dsync.InquireReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DistSync service

type DistSyncClient interface {
	// Request for Distributed Lock
	Request(ctx context.Context, in *LockReq, opts ...grpc.CallOption) (*Node, error)
	// Request for Distributed Lock
	Reply(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Relinquish Distributed Lock
	Relinquish(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Inquire on status of Distributed Lock from head of queue
	Inquire(ctx context.Context, in *Node, opts ...grpc.CallOption) (*InquireReply, error)
}

type distSyncClient struct {
	cc *grpc.ClientConn
}

func NewDistSyncClient(cc *grpc.ClientConn) DistSyncClient {
	return &distSyncClient{cc}
}

func (c *distSyncClient) Request(ctx context.Context, in *LockReq, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/dsync.DistSync/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distSyncClient) Reply(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/dsync.DistSync/Reply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distSyncClient) Relinquish(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/dsync.DistSync/Relinquish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distSyncClient) Inquire(ctx context.Context, in *Node, opts ...grpc.CallOption) (*InquireReply, error) {
	out := new(InquireReply)
	err := grpc.Invoke(ctx, "/dsync.DistSync/Inquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistSync service

type DistSyncServer interface {
	// Request for Distributed Lock
	Request(context.Context, *LockReq) (*Node, error)
	// Request for Distributed Lock
	Reply(context.Context, *Node) (*Node, error)
	// Relinquish Distributed Lock
	Relinquish(context.Context, *Node) (*Node, error)
	// Inquire on status of Distributed Lock from head of queue
	Inquire(context.Context, *Node) (*InquireReply, error)
}

func RegisterDistSyncServer(s *grpc.Server, srv DistSyncServer) {
	s.RegisterService(&_DistSync_serviceDesc, srv)
}

func _DistSync_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistSyncServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsync.DistSync/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistSyncServer).Request(ctx, req.(*LockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistSync_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistSyncServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsync.DistSync/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistSyncServer).Reply(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistSync_Relinquish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistSyncServer).Relinquish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsync.DistSync/Relinquish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistSyncServer).Relinquish(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistSync_Inquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistSyncServer).Inquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsync.DistSync/Inquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistSyncServer).Inquire(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dsync.DistSync",
	HandlerType: (*DistSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _DistSync_Request_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _DistSync_Reply_Handler,
		},
		{
			MethodName: "Relinquish",
			Handler:    _DistSync_Relinquish_Handler,
		},
		{
			MethodName: "Inquire",
			Handler:    _DistSync_Inquire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsync.proto",
}

func init() { proto.RegisterFile("dsync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4e, 0xb4, 0x30,
	0x14, 0x85, 0x87, 0x3f, 0xc3, 0x0f, 0x5e, 0x8c, 0x8b, 0x3a, 0x8b, 0x09, 0x0b, 0x9d, 0xa0, 0x0b,
	0x36, 0x76, 0xcc, 0xf8, 0x06, 0x13, 0x36, 0x26, 0x46, 0x27, 0xd5, 0x17, 0x70, 0xe0, 0x8a, 0x8d,
	0x40, 0x0b, 0x2d, 0x89, 0xbc, 0x96, 0x4f, 0x68, 0xda, 0x32, 0x06, 0x8d, 0x71, 0xd5, 0x9e, 0x9b,
	0xaf, 0xe7, 0xf6, 0x1c, 0x88, 0x0a, 0x35, 0x34, 0x39, 0x95, 0x9d, 0xd0, 0x82, 0xf8, 0x56, 0xc4,
	0xe7, 0xa5, 0x10, 0x65, 0x85, 0x6b, 0x3b, 0xdc, 0xf7, 0x2f, 0x6b, 0xcd, 0x6b, 0x54, 0xfa, 0xb9,
	0x96, 0x8e, 0x4b, 0x1e, 0x20, 0xb8, 0x13, 0xf9, 0x1b, 0xc3, 0x96, 0x10, 0x98, 0x37, 0xa2, 0xc0,
	0xa5, 0xb7, 0xf2, 0xd2, 0x23, 0x66, 0xef, 0xe4, 0x1a, 0x7c, 0xad, 0x74, 0x2d, 0x97, 0xff, 0x56,
	0x5e, 0x1a, 0x6d, 0x62, 0xea, 0xfc, 0xe8, 0xc1, 0x8f, 0x3e, 0x1d, 0xfc, 0x98, 0x03, 0x93, 0x18,
	0xe6, 0xf7, 0xe6, 0xe5, 0x2f, 0x6e, 0x49, 0x06, 0xc7, 0xb7, 0x4d, 0xdb, 0xf3, 0x0e, 0x19, 0xca,
	0x6a, 0x20, 0x0b, 0xf0, 0x07, 0x8e, 0x55, 0x61, 0xa1, 0x90, 0x39, 0x41, 0xce, 0x00, 0x3a, 0xac,
	0xb8, 0x01, 0xd5, 0xab, 0x5d, 0x1c, 0xb2, 0xc9, 0x64, 0xf3, 0xe1, 0x41, 0x98, 0x71, 0xa5, 0x1f,
	0x87, 0x26, 0x27, 0x29, 0x04, 0x0c, 0xdb, 0x1e, 0x95, 0x26, 0x27, 0xd4, 0x15, 0x30, 0xe6, 0x89,
	0xa3, 0x51, 0x9b, 0xef, 0x24, 0x33, 0x72, 0x01, 0xbe, 0xdb, 0x3a, 0x9d, 0xff, 0x84, 0x52, 0x00,
	0xf6, 0xb5, 0xe9, 0x4f, 0xf2, 0x0a, 0x82, 0x31, 0xcb, 0x77, 0xec, 0x74, 0x14, 0xd3, 0xa0, 0xc9,
	0x6c, 0x7b, 0x09, 0x0b, 0x2e, 0x68, 0xd9, 0xc9, 0x9c, 0x16, 0x75, 0xaf, 0xf1, 0xdd, 0x61, 0x5b,
	0xc8, 0xcc, 0xb1, 0x33, 0x75, 0xee, 0xbc, 0xfd, 0x7f, 0xdb, 0xeb, 0xcd, 0x67, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc2, 0x32, 0xfb, 0x83, 0xcb, 0x01, 0x00, 0x00,
}
